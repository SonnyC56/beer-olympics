import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { Card, CardContent, CardHeader, CardTitle } from '../ui/card';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '../ui/select';
import { motion } from 'framer-motion';
import { BarChart3, Users, Trophy, Target, Award, Activity, Zap, Calendar } from 'lucide-react';
export function AnalyticsPanel({ analytics, selectedTimeframe, onTimeframeChange }) {
    if (!analytics) {
        return (_jsx("div", { className: "space-y-6", children: _jsx(Card, { className: "bg-white/10 backdrop-blur-lg border-white/20", children: _jsxs(CardContent, { className: "p-8 text-center", children: [_jsx("div", { className: "animate-spin rounded-full h-8 w-8 border-b-2 border-purple-500 mx-auto" }), _jsx("p", { className: "text-gray-400 mt-2", children: "Loading analytics..." })] }) }) }));
    }
    const { teamPerformance, matchTrends, playerStats, eventPopularity, engagement } = analytics;
    return (_jsxs("div", { className: "space-y-6", children: [_jsx(Card, { className: "bg-white/10 backdrop-blur-lg border-white/20", children: _jsx(CardHeader, { children: _jsxs("div", { className: "flex items-center justify-between", children: [_jsxs(CardTitle, { className: "text-white flex items-center gap-3", children: [_jsx(BarChart3, { className: "w-6 h-6 text-purple-400" }), "Tournament Analytics"] }), _jsxs(Select, { value: selectedTimeframe, onValueChange: onTimeframeChange, children: [_jsx(SelectTrigger, { className: "w-48 bg-white/10 border-white/20 text-white", children: _jsx(SelectValue, {}) }), _jsxs(SelectContent, { className: "bg-gray-900 border-white/20", children: [_jsx(SelectItem, { value: "all", children: "All Time" }), _jsx(SelectItem, { value: "today", children: "Today" }), _jsx(SelectItem, { value: "week", children: "This Week" }), _jsx(SelectItem, { value: "month", children: "This Month" })] })] })] }) }) }), _jsxs("div", { className: "grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4", children: [_jsx(motion.div, { initial: { opacity: 0, y: 20 }, animate: { opacity: 1, y: 0 }, transition: { delay: 0.1 }, children: _jsx(Card, { className: "bg-white/10 backdrop-blur-lg border-white/20", children: _jsx(CardContent, { className: "p-6", children: _jsxs("div", { className: "flex items-center justify-between", children: [_jsxs("div", { children: [_jsx("p", { className: "text-sm text-gray-400", children: "Total Players" }), _jsx("p", { className: "text-3xl font-bold text-white", children: playerStats.totalPlayers || 0 }), _jsx("p", { className: "text-xs text-gray-500 mt-1", children: "Active participants" })] }), _jsx(Users, { className: "w-12 h-12 text-blue-400" })] }) }) }) }), _jsx(motion.div, { initial: { opacity: 0, y: 20 }, animate: { opacity: 1, y: 0 }, transition: { delay: 0.2 }, children: _jsx(Card, { className: "bg-white/10 backdrop-blur-lg border-white/20", children: _jsx(CardContent, { className: "p-6", children: _jsxs("div", { className: "flex items-center justify-between", children: [_jsxs("div", { children: [_jsx("p", { className: "text-sm text-gray-400", children: "Avg Win Rate" }), _jsxs("p", { className: "text-3xl font-bold text-white", children: [Math.round((playerStats.avgWinRate || 0) * 100), "%"] }), _jsx("p", { className: "text-xs text-gray-500 mt-1", children: "Player average" })] }), _jsx(Trophy, { className: "w-12 h-12 text-yellow-400" })] }) }) }) }), _jsx(motion.div, { initial: { opacity: 0, y: 20 }, animate: { opacity: 1, y: 0 }, transition: { delay: 0.3 }, children: _jsx(Card, { className: "bg-white/10 backdrop-blur-lg border-white/20", children: _jsx(CardContent, { className: "p-6", children: _jsxs("div", { className: "flex items-center justify-between", children: [_jsxs("div", { children: [_jsx("p", { className: "text-sm text-gray-400", children: "Engagement Rate" }), _jsxs("p", { className: "text-3xl font-bold text-white", children: [Math.round((1 - (engagement.disputeRate || 0) / 100) * 100), "%"] }), _jsx("p", { className: "text-xs text-gray-500 mt-1", children: "Score agreement" })] }), _jsx(Activity, { className: "w-12 h-12 text-green-400" })] }) }) }) }), _jsx(motion.div, { initial: { opacity: 0, y: 20 }, animate: { opacity: 1, y: 0 }, transition: { delay: 0.4 }, children: _jsx(Card, { className: "bg-white/10 backdrop-blur-lg border-white/20", children: _jsx(CardContent, { className: "p-6", children: _jsxs("div", { className: "flex items-center justify-between", children: [_jsxs("div", { children: [_jsx("p", { className: "text-sm text-gray-400", children: "Score Reports" }), _jsx("p", { className: "text-3xl font-bold text-white", children: engagement.totalScoreSubmissions || 0 }), _jsx("p", { className: "text-xs text-gray-500 mt-1", children: "Total submissions" })] }), _jsx(Target, { className: "w-12 h-12 text-purple-400" })] }) }) }) })] }), _jsxs(Card, { className: "bg-white/10 backdrop-blur-lg border-white/20", children: [_jsx(CardHeader, { children: _jsxs(CardTitle, { className: "text-white flex items-center gap-3", children: [_jsx(Trophy, { className: "w-6 h-6 text-yellow-400" }), "Team Performance Leaderboard"] }) }), _jsx(CardContent, { children: _jsx("div", { className: "space-y-3", children: teamPerformance && teamPerformance.length > 0 ? (teamPerformance.slice(0, 10).map((team, index) => (_jsxs(motion.div, { initial: { opacity: 0, x: -20 }, animate: { opacity: 1, x: 0 }, transition: { delay: index * 0.05 }, className: "flex items-center justify-between p-3 bg-white/5 rounded-lg border border-white/10", children: [_jsxs("div", { className: "flex items-center gap-4", children: [_jsx("div", { className: "flex items-center justify-center w-8 h-8 rounded-full bg-gradient-to-r from-purple-500 to-blue-500 text-white font-bold text-sm", children: index + 1 }), _jsx("div", { className: "w-6 h-6 rounded", style: { backgroundColor: team.colorHex } }), _jsxs("div", { children: [_jsx("p", { className: "text-white font-medium", children: team.name }), _jsxs("p", { className: "text-sm text-gray-400", children: [team.matchesPlayed, " matches played"] })] })] }), _jsxs("div", { className: "flex items-center gap-6 text-right", children: [_jsxs("div", { children: [_jsx("p", { className: "text-green-400 font-bold", children: team.wins }), _jsx("p", { className: "text-xs text-gray-400", children: "Wins" })] }), _jsxs("div", { children: [_jsx("p", { className: "text-purple-400 font-bold", children: Math.round(team.avgPoints || 0) }), _jsx("p", { className: "text-xs text-gray-400", children: "Avg Score" })] }), _jsxs("div", { children: [_jsxs("p", { className: "text-blue-400 font-bold", children: [team.matchesPlayed > 0 ? Math.round((team.wins / team.matchesPlayed) * 100) : 0, "%"] }), _jsx("p", { className: "text-xs text-gray-400", children: "Win Rate" })] })] })] }, team.id)))) : (_jsxs("div", { className: "text-center py-8", children: [_jsx(Trophy, { className: "w-12 h-12 text-gray-500 mx-auto mb-3" }), _jsx("p", { className: "text-gray-400", children: "No team performance data available" })] })) }) })] }), _jsxs("div", { className: "grid grid-cols-1 lg:grid-cols-2 gap-6", children: [_jsxs(Card, { className: "bg-white/10 backdrop-blur-lg border-white/20", children: [_jsx(CardHeader, { children: _jsxs(CardTitle, { className: "text-white flex items-center gap-3", children: [_jsx(Award, { className: "w-6 h-6 text-purple-400" }), "Event Popularity"] }) }), _jsx(CardContent, { children: _jsx("div", { className: "space-y-3", children: eventPopularity && eventPopularity.length > 0 ? (eventPopularity.map((event, index) => (_jsxs(motion.div, { initial: { opacity: 0, x: -20 }, animate: { opacity: 1, x: 0 }, transition: { delay: index * 0.1 }, className: "flex items-center justify-between p-3 bg-white/5 rounded-lg", children: [_jsxs("div", { children: [_jsx("p", { className: "text-white font-medium", children: event.name }), _jsx("p", { className: "text-sm text-gray-400 capitalize", children: event.type })] }), _jsxs("div", { className: "text-right", children: [_jsx("p", { className: "text-purple-400 font-bold", children: event.timesPlayed }), _jsx("p", { className: "text-xs text-gray-400", children: "Matches" })] })] }, `${event.name}-${index}`)))) : (_jsxs("div", { className: "text-center py-8", children: [_jsx(Award, { className: "w-12 h-12 text-gray-500 mx-auto mb-3" }), _jsx("p", { className: "text-gray-400", children: "No event data available" })] })) }) })] }), _jsxs(Card, { className: "bg-white/10 backdrop-blur-lg border-white/20", children: [_jsx(CardHeader, { children: _jsxs(CardTitle, { className: "text-white flex items-center gap-3", children: [_jsx(Activity, { className: "w-6 h-6 text-green-400" }), "Match Trends"] }) }), _jsx(CardContent, { children: _jsx("div", { className: "space-y-3", children: matchTrends && matchTrends.length > 0 ? (matchTrends.slice(-7).map((trend, index) => (_jsxs(motion.div, { initial: { opacity: 0, x: -20 }, animate: { opacity: 1, x: 0 }, transition: { delay: index * 0.1 }, className: "flex items-center justify-between p-3 bg-white/5 rounded-lg", children: [_jsxs("div", { children: [_jsx("p", { className: "text-white font-medium", children: new Date(trend.date).toLocaleDateString() }), _jsxs("p", { className: "text-sm text-gray-400", children: [Math.round(trend.avgDuration || 0), "m avg duration"] })] }), _jsxs("div", { className: "text-right", children: [_jsx("p", { className: "text-blue-400 font-bold", children: trend.matchesCompleted }), _jsx("p", { className: "text-xs text-gray-400", children: "Completed" })] })] }, trend.date)))) : (_jsxs("div", { className: "text-center py-8", children: [_jsx(Calendar, { className: "w-12 h-12 text-gray-500 mx-auto mb-3" }), _jsx("p", { className: "text-gray-400", children: "No trend data available" })] })) }) })] })] }), _jsxs(Card, { className: "bg-white/10 backdrop-blur-lg border-white/20", children: [_jsx(CardHeader, { children: _jsxs(CardTitle, { className: "text-white flex items-center gap-3", children: [_jsx(Zap, { className: "w-6 h-6 text-purple-400" }), "Engagement Metrics"] }) }), _jsx(CardContent, { children: _jsxs("div", { className: "grid grid-cols-1 md:grid-cols-3 gap-6", children: [_jsxs("div", { className: "text-center", children: [_jsx("div", { className: "text-3xl font-bold text-purple-400 mb-2", children: engagement.uniqueScoreReporters || 0 }), _jsx("p", { className: "text-gray-400", children: "Unique Reporters" }), _jsx("p", { className: "text-xs text-gray-500 mt-1", children: "Players submitting scores" })] }), _jsxs("div", { className: "text-center", children: [_jsxs("div", { className: "text-3xl font-bold text-green-400 mb-2", children: [Math.round((1 - (engagement.disputeRate || 0) / 100) * 100), "%"] }), _jsx("p", { className: "text-gray-400", children: "Agreement Rate" }), _jsx("p", { className: "text-xs text-gray-500 mt-1", children: "Non-disputed scores" })] }), _jsxs("div", { className: "text-center", children: [_jsx("div", { className: "text-3xl font-bold text-blue-400 mb-2", children: engagement.matchesWithMedia || 0 }), _jsx("p", { className: "text-gray-400", children: "Matches w/ Media" }), _jsx("p", { className: "text-xs text-gray-500 mt-1", children: "Photos/videos attached" })] })] }) })] })] }));
}
