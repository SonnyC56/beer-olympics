import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "react/jsx-runtime";
import { useState, useEffect } from 'react';
import { useParams, Navigate } from 'react-router-dom';
import { useAuth } from '../context/auth';
import { trpc } from '../utils/trpc';
import { Card, CardContent, CardHeader, CardTitle } from '../components/ui/card';
import { Button } from '../components/ui/button';
import { Badge } from '../components/ui/badge';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '../components/ui/tabs';
import { motion, AnimatePresence } from 'framer-motion';
import { Activity, Users, Trophy, AlertTriangle, Settings, Shield, BarChart3, Timer, AlertCircle, CheckCircle, Eye, RefreshCw, Zap, Gauge } from 'lucide-react';
// Components for different admin sections
import { TournamentControlCenter } from '../components/admin/TournamentControlCenter';
import { ActivityMonitor } from '../components/admin/ActivityMonitor';
import { TeamManagement } from '../components/admin/TeamManagement';
import { MatchOverrides } from '../components/admin/MatchOverrides';
import { AnalyticsPanel } from '../components/admin/AnalyticsPanel';
import { ModerationTools } from '../components/admin/ModerationTools';
import { HostTools } from '../components/admin/HostTools';
import { AdminLog } from '../components/admin/AdminLog';
import { AnnouncementSystem } from '../components/admin/AnnouncementSystem';
export function AdminDashboard() {
    const { slug } = useParams();
    const { user, loading: authLoading } = useAuth();
    const [activeTab, setActiveTab] = useState('overview');
    const [selectedTimeframe, setSelectedTimeframe] = useState('today');
    // Fetch tournament dashboard data
    const { data: dashboard, isLoading, refetch } = trpc.admin.getTournamentDashboard.useQuery({ tournamentId: slug }, {
        enabled: !!slug && !!user,
        refetchInterval: 5000 // Auto-refresh every 5 seconds
    });
    // Fetch analytics data
    const { data: analytics } = trpc.admin.getTournamentAnalytics.useQuery({ tournamentId: slug, timeframe: selectedTimeframe }, { enabled: !!slug && !!user });
    // Auto-refresh effect
    useEffect(() => {
        const interval = setInterval(() => {
            refetch();
        }, 10000); // Refresh every 10 seconds
        return () => clearInterval(interval);
    }, [refetch]);
    if (authLoading || isLoading) {
        return (_jsx("div", { className: "min-h-screen bg-gradient-to-br from-gray-900 via-purple-900 to-violet-900 flex items-center justify-center", children: _jsx("div", { className: "animate-spin rounded-full h-16 w-16 border-t-2 border-b-2 border-purple-500" }) }));
    }
    if (!user || !dashboard) {
        return _jsx(Navigate, { to: "/", replace: true });
    }
    const { tournament, stats, recentActivity, subTournamentStats } = dashboard;
    // Calculate real-time metrics
    const completionRate = stats.totalMatches > 0
        ? Math.round((stats.completedMatches / stats.totalMatches) * 100)
        : 0;
    const isLive = tournament.status === 'IN_PROGRESS';
    const hasIssues = stats.pendingScores > 0 || stats.openDisputes > 0;
    return (_jsxs("div", { className: "min-h-screen bg-gradient-to-br from-gray-900 via-purple-900 to-violet-900", children: [_jsx(motion.header, { initial: { opacity: 0, y: -20 }, animate: { opacity: 1, y: 0 }, className: "bg-black/50 backdrop-blur-lg border-b border-white/10 sticky top-0 z-50", children: _jsx("div", { className: "container mx-auto px-4 py-4", children: _jsxs("div", { className: "flex items-center justify-between", children: [_jsxs("div", { className: "flex items-center gap-4", children: [_jsx(Shield, { className: "w-8 h-8 text-purple-400" }), _jsxs("div", { children: [_jsx("h1", { className: "text-2xl font-bold text-white", children: "Admin Dashboard" }), _jsx("p", { className: "text-sm text-gray-400", children: tournament.name })] }), isLive && (_jsxs(Badge, { className: "bg-green-500/20 text-green-400 border-green-500/50", children: [_jsx(Activity, { className: "w-3 h-3 mr-1" }), "LIVE"] }))] }), _jsxs("div", { className: "flex items-center gap-3", children: [_jsx(Button, { variant: "outline", size: "sm", onClick: () => refetch(), className: "border-white/20", children: _jsx(RefreshCw, { className: "w-4 h-4" }) }), _jsx(Badge, { variant: hasIssues ? 'destructive' : 'secondary', children: hasIssues ? (_jsxs(_Fragment, { children: [_jsx(AlertCircle, { className: "w-3 h-3 mr-1" }), stats.pendingScores + stats.openDisputes, " Issues"] })) : (_jsxs(_Fragment, { children: [_jsx(CheckCircle, { className: "w-3 h-3 mr-1" }), "All Clear"] })) })] })] }) }) }), _jsxs("div", { className: "container mx-auto px-4 py-6 space-y-6", children: [_jsxs(motion.div, { initial: { opacity: 0, y: 20 }, animate: { opacity: 1, y: 0 }, className: "grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4", children: [_jsx(Card, { className: "bg-white/10 backdrop-blur-lg border-white/20", children: _jsx(CardContent, { className: "p-6", children: _jsxs("div", { className: "flex items-center justify-between", children: [_jsxs("div", { children: [_jsx("p", { className: "text-sm text-gray-400", children: "Progress" }), _jsxs("p", { className: "text-3xl font-bold text-white", children: [completionRate, "%"] }), _jsxs("p", { className: "text-xs text-gray-500 mt-1", children: [stats.completedMatches, "/", stats.totalMatches, " matches"] })] }), _jsxs("div", { className: "relative", children: [_jsxs("svg", { className: "w-16 h-16 transform -rotate-90", children: [_jsx("circle", { cx: "32", cy: "32", r: "28", stroke: "currentColor", strokeWidth: "4", fill: "none", className: "text-white/20" }), _jsx("circle", { cx: "32", cy: "32", r: "28", stroke: "currentColor", strokeWidth: "4", fill: "none", strokeDasharray: `${completionRate * 1.76} 176`, className: "text-purple-400" })] }), _jsx(Gauge, { className: "absolute inset-0 w-8 h-8 m-auto text-purple-400" })] })] }) }) }), _jsx(Card, { className: "bg-white/10 backdrop-blur-lg border-white/20", children: _jsx(CardContent, { className: "p-6", children: _jsxs("div", { className: "flex items-center justify-between", children: [_jsxs("div", { children: [_jsx("p", { className: "text-sm text-gray-400", children: "Teams" }), _jsx("p", { className: "text-3xl font-bold text-white", children: stats.totalTeams }), _jsx("p", { className: "text-xs text-gray-500 mt-1", children: "Active teams" })] }), _jsx(Users, { className: "w-12 h-12 text-blue-400" })] }) }) }), _jsx(Card, { className: "bg-white/10 backdrop-blur-lg border-white/20", children: _jsx(CardContent, { className: "p-6", children: _jsxs("div", { className: "flex items-center justify-between", children: [_jsxs("div", { children: [_jsx("p", { className: "text-sm text-gray-400", children: "Avg Duration" }), _jsxs("p", { className: "text-3xl font-bold text-white", children: [Math.round(stats.avgMatchDuration || 0), "m"] }), _jsx("p", { className: "text-xs text-gray-500 mt-1", children: "Per match" })] }), _jsx(Timer, { className: "w-12 h-12 text-green-400" })] }) }) }), _jsx(Card, { className: "bg-white/10 backdrop-blur-lg border-white/20 border-orange-500/50", children: _jsx(CardContent, { className: "p-6", children: _jsxs("div", { className: "flex items-center justify-between", children: [_jsxs("div", { children: [_jsx("p", { className: "text-sm text-gray-400", children: "Pending" }), _jsx("p", { className: "text-3xl font-bold text-orange-400", children: stats.pendingScores + stats.openDisputes }), _jsxs("p", { className: "text-xs text-gray-500 mt-1", children: [stats.pendingScores, " scores, ", stats.openDisputes, " disputes"] })] }), _jsx(AlertTriangle, { className: "w-12 h-12 text-orange-400" })] }) }) })] }), _jsxs(Tabs, { value: activeTab, onValueChange: setActiveTab, className: "space-y-4", children: [_jsxs(TabsList, { className: "bg-white/10 backdrop-blur-lg border border-white/20 p-1", children: [_jsxs(TabsTrigger, { value: "overview", className: "data-[state=active]:bg-purple-500", children: [_jsx(Activity, { className: "w-4 h-4 mr-2" }), "Overview"] }), _jsxs(TabsTrigger, { value: "control", className: "data-[state=active]:bg-purple-500", children: [_jsx(Settings, { className: "w-4 h-4 mr-2" }), "Control Center"] }), _jsxs(TabsTrigger, { value: "teams", className: "data-[state=active]:bg-purple-500", children: [_jsx(Users, { className: "w-4 h-4 mr-2" }), "Teams"] }), _jsxs(TabsTrigger, { value: "matches", className: "data-[state=active]:bg-purple-500", children: [_jsx(Trophy, { className: "w-4 h-4 mr-2" }), "Matches"] }), _jsxs(TabsTrigger, { value: "analytics", className: "data-[state=active]:bg-purple-500", children: [_jsx(BarChart3, { className: "w-4 h-4 mr-2" }), "Analytics"] }), _jsxs(TabsTrigger, { value: "moderation", className: "data-[state=active]:bg-purple-500", children: [_jsx(Shield, { className: "w-4 h-4 mr-2" }), "Moderation"] }), _jsxs(TabsTrigger, { value: "host", className: "data-[state=active]:bg-purple-500", children: [_jsx(Zap, { className: "w-4 h-4 mr-2" }), "Host Tools"] }), _jsxs(TabsTrigger, { value: "logs", className: "data-[state=active]:bg-purple-500", children: [_jsx(Eye, { className: "w-4 h-4 mr-2" }), "Logs"] })] }), _jsx(AnimatePresence, { mode: "wait", children: _jsxs(motion.div, { initial: { opacity: 0, x: 20 }, animate: { opacity: 1, x: 0 }, exit: { opacity: 0, x: -20 }, transition: { duration: 0.2 }, children: [_jsxs(TabsContent, { value: "overview", className: "space-y-6", children: [_jsxs("div", { className: "grid grid-cols-1 lg:grid-cols-2 gap-6", children: [_jsx(ActivityMonitor, { recentActivity: recentActivity, tournamentId: slug }), tournament.isMegaTournament && subTournamentStats && (_jsxs(Card, { className: "bg-white/10 backdrop-blur-lg border-white/20", children: [_jsx(CardHeader, { children: _jsx(CardTitle, { className: "text-white", children: "Sub-Tournament Progress" }) }), _jsx(CardContent, { className: "space-y-3", children: subTournamentStats.map((sub) => (_jsxs("div", { className: "flex items-center justify-between", children: [_jsxs("div", { className: "flex-1", children: [_jsx("p", { className: "text-sm font-medium text-white", children: sub.name }), _jsx("div", { className: "mt-1 bg-white/10 rounded-full h-2", children: _jsx("div", { className: "bg-purple-500 h-2 rounded-full transition-all duration-300", style: {
                                                                                                width: `${(sub.completedMatches / sub.totalMatches) * 100}%`
                                                                                            } }) })] }), _jsxs(Badge, { variant: sub.isComplete ? 'default' : 'secondary', className: "ml-3", children: [sub.completedMatches, "/", sub.totalMatches] })] }, sub.id))) })] }))] }), _jsx(AnnouncementSystem, { tournamentId: slug })] }), _jsx(TabsContent, { value: "control", children: _jsx(TournamentControlCenter, { tournament: tournament, tournamentId: slug, onUpdate: () => refetch() }) }), _jsx(TabsContent, { value: "teams", children: _jsx(TeamManagement, { tournamentId: slug, onUpdate: () => refetch() }) }), _jsx(TabsContent, { value: "matches", children: _jsx(MatchOverrides, { tournamentId: slug, onUpdate: () => refetch() }) }), _jsx(TabsContent, { value: "analytics", children: _jsx(AnalyticsPanel, { analytics: analytics || undefined, selectedTimeframe: selectedTimeframe, onTimeframeChange: setSelectedTimeframe }) }), _jsx(TabsContent, { value: "moderation", children: _jsx(ModerationTools, { tournamentId: slug, onUpdate: () => refetch() }) }), _jsx(TabsContent, { value: "host", children: _jsx(HostTools, { tournamentId: slug, tournament: tournament, onUpdate: () => refetch() }) }), _jsx(TabsContent, { value: "logs", children: _jsx(AdminLog, { tournamentId: slug }) })] }, activeTab) })] })] })] }));
}
